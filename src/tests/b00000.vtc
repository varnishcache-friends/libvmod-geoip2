varnishtest "Test supported types"

server s1 {
	rxreq
	txresp
} -start

shell "cp ${vmod_topsrc}/src/tests/libvmod-geoip2.mmdb ${tmpdir}"

varnish v1 -vcl+backend {
	import geoip2 from "${vmod_topbuild}/src/.libs/libvmod_geoip2.so";
	import std;

	sub vcl_init {
		new db1 = geoip2.geoip2("${tmpdir}/libvmod-geoip2.mmdb");
	}

	sub vcl_deliver {
		set resp.http.boolean = db1.lookup(
		    "boolean",
		    std.ip("1.1.1.1", "0.0.0.0"));
		set resp.http.bytes = db1.lookup(
		    "bytes",
		    std.ip("1.1.1.1", "0.0.0.0"));
		set resp.http.bytes_json = db1.lookup(
		    "bytes",
		    std.ip("1.1.1.1", "0.0.0.0"),
		    true);
		set resp.http.double = db1.lookup(
		    "double",
		    std.ip("1.1.1.1", "0.0.0.0"));
		set resp.http.float = db1.lookup(
		    "float",
		    std.ip("1.1.1.1", "0.0.0.0"));
		set resp.http.int32 = db1.lookup(
		    "int32",
		    std.ip("1.1.1.1", "0.0.0.0"));
		set resp.http.utf8_stringX = db1.lookup(
		    "map/mapX/utf8_stringX",
		    std.ip("1.1.1.1", "0.0.0.0"));
		set resp.http.utf8_stringX_json = db1.lookup(
		    "map/mapX/utf8_stringX",
		    std.ip("1.1.1.1", "0.0.0.0"),
		    true);
		set resp.http.uint16 = db1.lookup(
		    "uint16",
		    std.ip("1.1.1.1", "0.0.0.0"));
		set resp.http.uint32 = db1.lookup(
		    "uint32",
		    std.ip("1.1.1.1", "0.0.0.0"));
		set resp.http.uint64 = db1.lookup(
		    "uint64",
		    std.ip("1.1.1.1", "0.0.0.0"));
		set resp.http.utf8_string = db1.lookup(
		    "utf8_string",
		    std.ip("1.1.1.1", "0.0.0.0"));
	}
} -start

client c1 {
	txreq
	rxresp
	expect resp.http.boolean == "true"
	expect resp.http.bytes == "0000002A"
	expect resp.http.bytes_json == {"0000002A"}
	expect resp.http.double == "42.123456"
	expect resp.http.float == "1.100000"
	expect resp.http.int32 == "-268435456"
	expect resp.http.utf8_stringX == "hello"
	expect resp.http.utf8_stringX_json == {"hello"}
	expect resp.http.uint16 == "100"
	expect resp.http.uint32 == "268435456"
	expect resp.http.uint64 == "1152921504606846976"
	expect resp.http.utf8_string == "unicode! ☯ - ♫"
} -run
